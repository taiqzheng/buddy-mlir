memref.global "private" @Data : memref<391xf64> = dense<[0.024862593984176087, 0.0019908218880980706, 0.022871772096078023, 0.003981643776196141, 0.020880950207979945, 0.005972465664294215, 0.018890128319881874, 0.007963287552392284, 0.016899306431783803, 0.00995410944049036, 0.014908484543685726, 0.011944931328588433, 0.012917662655587655, 0.013935753216686492, 0.0109268407674896, 0.015926575104784558, 0.008936018879391525, 0.017917396992882653, 0.006945196991293433, 0.019908218880980738, 0.004954375103195362, 0.021899040769078785, 0.0029635532150973053, 0.02388986265717686, 0.000972731326999214, 0.025880684545274913, 0.025835325311175383, 0.0010180905610987637, 0.023844503423077285, 0.003008912449196894, 0.0218536815349792, 0.004999734337294947, 0.019862859646881146, 0.00699055622539301, 0.017872037758783092, 0.008981378113491093, 0.015881215870684983, 0.010972200001589204, 0.013890393982586886, 0.012963021889687279, 0.011899572094488815, 0.01495384377778533, 0.009908750206390747, 0.016944665665883398, 0.007917928318292721, 0.01893548755398142, 0.00592710643019463, 0.020874010059259842, 0.0040404255283634505, 0.02211421726709443, 0.003318606124028175, 0.021736724240202378, 0.0036109675065762467, 0.020497701500567712, 0.0047621938624405336, 0.018486659689787407, 0.00659261778657699, 0.015856038061722075, 0.00896277117173217, 0.01273876809538182, 0.011751329556399702, 0.009250369503549623, 0.014853145171184273, 0.005490841259941731, 0.018177473406255133, 0.0015463665611462304, 0.0028155461301291296, 0.016329520204672005, 0.0074201889869586046, 0.011181051149095055, 0.012018863908450889, 0.006065350444974551, 0.016561277418378373, 0.0010297985194884273, 0.004360878822945124, 0.012770536755428743, 0.009707189146398206, 0.00698640273562069, 0.014854299940667337, 0.0014180475372245899, 0.004391219533926463, 0.011486922519974862, 0.010089744452471235, 0.005411105098683222, 0.00040022287019040627, 0.01473556574143922, 0.006518189694660876, 0.008278412940789993, 0.012277561276489102, 0.0021878083895293813, 0.003967812818254116, 0.01018448003033658, 0.009981875463793392, 0.0038694348523115605, 0.002286485205918727, 0.011274894758755125, 0.00846622203459276, 0.00482029386344711, 0.0013397691078130697, 0.01167825163503901, 0.0076086824024487005, 0.005156961757386885, 0.0010091040034666294, 0.011507895445653202, 0.007301822420859842, 0.00498210435635522, 0.00119016554305424, 0.010863499380371759, 0.007451189902152603, 0.004385921781217367, 0.001791381421388157, 0.009832492179588035, 0.007973956151288167, 0.003447454713364045, 0.00273258990979288, 0.008491348038548032, 0.008797688393881514, 0.00223576473247454, 0.003943828025486854, 0.00690675179681992, 0.00985924113208423, 0.0008110002442122107, 0.005364237465034378, 0.005136650837642653, 0.0008692337979845255, 0.009462301431073093, 0.0069410774768914035, 0.0032312041128928558, 0.0027783994364693502, 0.0072370497293947405, 0.008628834806348044, 0.0012336377872858904, 0.004773912819246566, 0.004943322320664174, 0.0009189908321450893, 0.008653006854042458, 0.006818502698028209, 0.0026164354511310182, 0.0032485836741847724, 0.006051854749492107, 0.008880466967901061, 0.0002863667968266877, 0.005574480003847867, 0.0034677978994882394, 0.0022684930397946727, 0.006649229002149792, 0.007871464954585431, 0.0009245911230515482, 0.004809896965650232, 0.003870811942679267, 0.0017483289767150309, 0.006817032762306986, 0.007283343633866355, 0.00117032890964782, 0.00444812418116144, 0.0038987290660258203, 0.001612904728456526, 0.006627129222403821, 0.007047320122030166, 0.001089299240400779, 0.004421714754438077, 0.003615982700014719, 0.0017961093868459883, 0.006142666159628658, 0.007102936106246769, 0.000739228059530935, 0.00467144758787073, 0.003079108186777991, 0.002239959069494691, 0.005418988314025048, 0.007397185776342812, 0.0001706867135296284, 0.005145462616431531, 0.0023375742945811327, 0.0028937394565202498, 0.004504461875632637, 0.0006420162966089689, 0.006671349456684142, 0.005798479593256033, 0.0014345343541053727, 0.003713231338714718, 0.0034412191129693185, 0.0016279830841734021, 0.005447903871833263, 0.006591092774765041, 0.0004075043790786325, 0.004660011565279688, 0.0022658304669981606, 0.002728930355794336, 0.0041241565549176885, 0.0007978491463089834, 0.0059824826428372165, 0.005700822451952891, 0.001009910787399597, 0.003912510374718906, 0.0027308466911522586, 0.0021241982974849216, 0.00445178259490492, 0.00033588622025093644, 0.006172718498657583, 0.005150905140435021, 0.001294369078080886, 0.003494806955712255, 0.002888072359801849, 0.0018387087709894891, 0.004481775641522813, 0.0001826105862667237, 0.006075478923243776, 0.004886660120436632, 0.0013131388257841057, 0.0033530009608540383, 0.0027890160764299436, 0.001819341801271444, 0.004264893327075782, 0.0002856826416888495, 0.00574077057772162, 0.00485997904767977, 0.0011121684505728251, 0.003439706723569149, 0.002478930810892349, 0.002019434399458528, 0.003845693171211873, 0.0005991620753479068, 0.0052124555315313965, 0.005028639927429189, 0.0007317548848252071, 0.0037133714976539506, 0.001997469461541363, 0.002398103067878713, 0.0032631840382575193, 0.0010828346381034754, 0.004528898614973675, 0.005355687096081724, 0.00020713973879943928, 0.004137659389003323, 0.001379277219478372, 0.002919631681924923, 0.0025514147001573046, 0.0017016039748465222, 0.0037235521808362372, 0.0004835762677681217, 0.00489568966151517, 0.004680894973891053, 0.0006545265135735772, 0.003552918766430338, 0.001740005261220558, 0.002424942558969623, 0.0028254840088675383, 0.001296966351508908, 0.003910962756514519, 0.0001689901440481931, 0.0049964415041615, 0.004270978712160627, 0.0008546266928695816, 0.003226396296503344, 0.001859853580513147, 0.00218181388084606, 0.002865080468156712, 0.0011372314651887762, 0.003870307355800277, 9.264904953149247e-05, 0.004875534243443842, 0.00408313784805493, 0.0008483414885398006, 0.0031157837355450563, 0.0017792497148243077, 0.0021484296230351824, 0.002710157941108815, 0.0011810755105253086, 0.003641066167393322, 0.00021372139801543514, 0.00457197439367783, 0.004079728686464056, 0.0006716204322456959, 0.0031838932167458007, 0.0015337045412328826, 0.0022880577470275453, 0.0023957886502200695, 0.0013922222773092897, 0.0032578727592072563, 0.0004963868075910343, 0.004119956868194443, 0.004227725348621998, 0.00035597961441710105, 0.003398120989238948, 0.0011543279262957885, 0.0025685166298558978, 0.0019526762381744762, 0.0017389122704728477, 0.0027510245500531635, 0.0009093079110897976, 0.0035493728619318513, 7.970355170674751e-05, 0.004347721173810539, 0.0037299628548962886, 0.0006682946412839993, 0.0029616929924361443, 0.001407619285405272, 0.0021934231299760003, 0.002146943929526545, 0.001425153267515856, 0.0028862685736478176, 0.000656883405055712, 0.0036255932177690904, 0.004154576575021074, 9.92650919068254e-05, 0.00344310661360058, 0.0007839298194100073, 0.0027316366521800855, 0.0014685945469131891, 0.002020166690759591, 0.002153259274416371, 0.0013086967293390965, 0.002837924001919553, 0.0005972267679186017, 0.0035225887294227346, 0.00399151753267442, 0.00010181095051366054, 0.0033326481291776314, 0.0007358568907029797, 0.002673778725680842, 0.0013699028308922986, 0.002014909322184054, 0.0020039487710816176, 0.0013560399186872648, 0.002637994711270937, 0.0006971705151904762, 0.003272040651460256, 3.8301111693687365e-05, 0.0039060865916495753, 0.0033682563798377797, 0.000553036427908215, 0.0027580986579326967, 0.0011402059404032124, 0.0021479409360276127, 0.0017273754528982098, 0.0015377832141225299, 0.002314544965393207, 0.0009276254922174464, 0.002901714477888205, 0.00031746777031236304, 0.003488883990383202, 0.0035233401613614045, 0.0002608386658672823, 0.0029582927579996227, 0.0008045974293106004, 0.0023932453546378412, 0.0013483561927539183, 0.0018281979512760594, 0.0018921149561972363, 0.0012631505479142777, 0.0024358737196405545, 0.0006981031445524962, 0.0029796324830838727, 0.00013305574119071463, 0.003523391246527191, 0.0032513804428682767, 0.0003849812001174835, 0.0027281082517878774, 0.0008885386678154236, 0.0022048360607074776, 0.0013920961355133636, 0.0016815638696270783, 0.0018956536032113034, 0.001158291678546679, 0.002399211070909244, 0.0006350194874662795, 0.0029027685386071836, 0.0001117472963858801, 0.003406326006305124, 0.0031327631853624, 0.0003667416797849643, 0.002648177672131103, 0.0008330700230168817, 0.0021635921588998063, 0.001299398366248799, 0.00167900664566851, 0.0017657267094807168, 0.0011944211324372133, 0.002232055052712634, 0.0007098356192059166, 0.0026983833959445514, 0.00022525010597461998, 0.003164711739176469, 0.0031413131931234614, 0.002692554165534394, 0.002243795137945327, 0.0017950361103562596, 0.001346277082767192, 0.0008975180551781247, 0.0004487590275890572]>
memref.global "private" @D1Index : memref<391xindex> = dense<[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 194, 195, 196, 197, 198, 199]>
memref.global "private" @D2Index : memref<391xindex> = dense<[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 33, 34, 34, 35, 35, 36, 36, 37, 36, 37, 37, 38, 38, 39, 38, 39, 39, 40, 39, 40, 40, 41, 41, 42, 41, 42, 42, 43, 42, 43, 43, 44, 43, 44, 44, 45, 44, 45, 45, 46, 45, 46, 46, 47, 46, 47, 47, 48, 47, 48, 48, 49, 48, 49, 49, 50, 49, 50, 49, 50, 50, 51, 50, 51, 51, 52, 51, 52, 51, 52, 52, 53, 52, 53, 53, 54, 53, 54, 53, 54, 54, 55, 54, 55, 54, 55, 55, 56, 55, 56, 55, 56, 56, 57, 56, 57, 56, 57, 57, 58, 57, 58, 57, 58, 58, 59, 58, 59, 58, 59, 58, 59, 59, 60, 59, 60, 59, 60, 60, 61, 60, 61, 60, 61, 60, 61, 61, 62, 61, 62, 61, 62, 61, 62, 62, 63, 62, 63, 62, 63, 62, 63, 63, 64, 63, 64, 63, 64, 63, 64, 64, 65, 64, 65, 64, 65, 64, 65, 65, 66, 65, 66, 65, 66, 65, 66, 66, 67, 66, 67, 66, 67, 66, 67, 66, 67, 67, 68, 67, 68, 67, 68, 67, 68, 67, 68, 68, 69, 68, 69, 68, 69, 68, 69, 68, 69, 69, 70, 69, 70, 69, 70, 69, 70, 69, 70, 70, 71, 70, 71, 70, 71, 70, 71, 70, 71, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 72, 73, 72, 73, 72, 73, 72, 73, 72, 73, 73, 74, 73, 74, 73, 74, 73, 74, 73, 74, 73, 74, 74, 75, 74, 75, 74, 75, 74, 75, 74, 75, 74, 75, 74, 75, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 75, 76, 76, 77, 76, 77, 76, 77, 76, 77, 76, 77, 76, 77, 76, 77, 77, 78, 77, 78, 77, 78, 77, 78, 77, 78, 77, 78, 77, 78, 78, 79, 78, 79, 78, 79, 78, 79, 78, 79, 78, 79, 78, 79, 79, 79, 79, 79, 79, 79, 79]>
memref.global "private" @Shape : memref<2xi32> = dense<[201, 80]>
memref.global "private" @padLenMem : memref<2xindex> = dense<[200, 200]>
memref.global "private" @ccMem : memref<400xf64> = dense<[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 285.0, 286.0, 287.0, 288.0, 289.0, 290.0, 291.0, 292.0, 293.0, 294.0, 295.0, 296.0, 297.0, 298.0, 299.0, 300.0, 301.0, 302.0, 303.0, 304.0, 305.0, 306.0, 307.0, 308.0, 309.0, 310.0, 311.0, 312.0, 313.0, 314.0, 315.0, 316.0, 317.0, 318.0, 319.0, 320.0, 321.0, 322.0, 323.0, 324.0, 325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0, 333.0, 334.0, 335.0, 336.0, 337.0, 338.0, 339.0, 340.0, 341.0, 342.0, 343.0, 344.0, 345.0, 346.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0, 354.0, 355.0, 356.0, 357.0, 358.0, 359.0, 360.0, 361.0, 362.0, 363.0, 364.0, 365.0, 366.0, 367.0, 368.0, 369.0, 370.0, 371.0, 372.0, 373.0, 374.0, 375.0, 376.0, 377.0, 378.0, 379.0, 380.0, 381.0, 382.0, 383.0, 384.0, 385.0, 386.0, 387.0, 388.0, 389.0, 390.0, 391.0, 392.0, 393.0, 394.0, 395.0, 396.0, 397.0, 398.0, 399.0, 400.0]>
memref.global "private" @chMem : memref<400xf64> = dense<[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]>
memref.global "private" @tw0Mem : memref<297xf64> = dense<[0.999877, 0.015707, 0.999507, 0.031411, 0.998890, 0.047106, 0.998027, 0.062791, 0.996917, 0.078459, 0.995562, 0.094108, 0.993961, 0.109734, 0.992115, 0.125333, 0.990024, 0.140901, 0.987688, 0.156434, 0.985109, 0.171929, 0.982287, 0.187381, 0.979223, 0.202787, 0.975917, 0.218143, 0.972370, 0.233445, 0.968583, 0.248690, 0.964557, 0.263873, 0.960294, 0.278991, 0.955793, 0.294040, 0.951057, 0.309017, 0.946085, 0.323917, 0.940881, 0.338738, 0.935444, 0.353475, 0.929776, 0.368125, 0.923880, 0.382683, 0.917755, 0.397148, 0.911403, 0.411514, 0.904827, 0.425779, 0.898028, 0.439939, 0.891007, 0.453990, 0.883766, 0.467930, 0.876307, 0.481754, 0.868632, 0.495459, 0.860742, 0.509041, 0.852640, 0.522499, 0.844328, 0.535827, 0.835807, 0.549023, 0.827081, 0.562083, 0.818150, 0.575005, 0.809017, 0.587785, 0.799685, 0.600420, 0.790155, 0.612907, 0.780430, 0.625243, 0.770513, 0.637424, 0.760406, 0.649448, 0.750111, 0.661312, 0.739631, 0.673013, 0.728969, 0.684547, 0.718126, 0.695913, 0.000000, 0.999507, 0.031411, 0.998027, 0.062791, 0.995562, 0.094108, 0.992115, 0.125333, 0.987688, 0.156434, 0.982287, 0.187381, 0.975917, 0.218143, 0.968583, 0.248690, 0.960294, 0.278991, 0.951057, 0.309017, 0.940881, 0.338738, 0.929776, 0.368125, 0.917755, 0.397148, 0.904827, 0.425779, 0.891007, 0.453990, 0.876307, 0.481754, 0.860742, 0.509041, 0.844328, 0.535827, 0.827081, 0.562083, 0.809017, 0.587785, 0.790155, 0.612907, 0.770513, 0.637424, 0.750111, 0.661312, 0.728969, 0.684547, 0.707107, 0.707107, 0.684547, 0.728969, 0.661312, 0.750111, 0.637424, 0.770513, 0.612907, 0.790155, 0.587785, 0.809017, 0.562083, 0.827081, 0.535827, 0.844328, 0.509041, 0.860742, 0.481754, 0.876307, 0.453990, 0.891007, 0.425779, 0.904827, 0.397148, 0.917755, 0.368125, 0.929776, 0.338738, 0.940881, 0.309017, 0.951057, 0.278991, 0.960294, 0.248690, 0.968583, 0.218143, 0.975917, 0.187381, 0.982287, 0.156434, 0.987688, 0.125333, 0.992115, 0.094108, 0.995562, 0.062791, 0.998027, 0.031411, 0.999507, 0.000000, 0.998890, 0.047106, 0.995562, 0.094108, 0.990024, 0.140901, 0.982287, 0.187381, 0.972370, 0.233445, 0.960294, 0.278991, 0.946085, 0.323917, 0.929776, 0.368125, 0.911403, 0.411514, 0.891007, 0.453990, 0.868632, 0.495459, 0.844328, 0.535827, 0.818150, 0.575005, 0.790155, 0.612907, 0.760406, 0.649448, 0.728969, 0.684547, 0.695913, 0.718126, 0.661312, 0.750111, 0.625243, 0.780430, 0.587785, 0.809017, 0.549023, 0.835807, 0.509041, 0.860742, 0.467930, 0.883766, 0.425779, 0.904827, 0.382683, 0.923880, 0.338738, 0.940881, 0.294040, 0.955793, 0.248690, 0.968583, 0.202787, 0.979223, 0.156434, 0.987688, 0.109734, 0.993961, 0.062791, 0.998027, 0.015707, 0.999877, -0.031411, 0.999507, -0.078459, 0.996917, -0.125333, 0.992115, -0.171929, 0.985109, -0.218143, 0.975917, -0.263873, 0.964557, -0.309017, 0.951057, -0.353475, 0.935444, -0.397148, 0.917755, -0.439939, 0.898028, -0.481754, 0.876307, -0.522499, 0.852640, -0.562083, 0.827081, -0.600420, 0.799685, -0.637424, 0.770513, -0.673013, 0.739631, 0.000000]>
memref.global "private" @tw1Mem : memref<72xf64> = dense<[0.998027, 0.062791, 0.992115, 0.125333, 0.982287, 0.187381, 0.968583, 0.248690, 0.951057, 0.309017, 0.929776, 0.368125, 0.904827, 0.425779, 0.876307, 0.481754, 0.844328, 0.535827, 0.809017, 0.587785, 0.770513, 0.637424, 0.728969, 0.684547, 0.992115, 0.125333, 0.968583, 0.248690, 0.929776, 0.368125, 0.876307, 0.481754, 0.809017, 0.587785, 0.728969, 0.684547, 0.637424, 0.770513, 0.535827, 0.844328, 0.425779, 0.904827, 0.309017, 0.951057, 0.187381, 0.982287, 0.062791, 0.998027, 0.982287, 0.187381, 0.929776, 0.368125, 0.844328, 0.535827, 0.728969, 0.684547, 0.587785, 0.809017, 0.425779, 0.904827, 0.248690, 0.968583, 0.062791, 0.998027, -0.125333, 0.992115, -0.309017, 0.951057, -0.481754, 0.876307, -0.637424, 0.770513]>
memref.global "private" @tw2Mem : memref<16xf64> = dense<[0.968583, 0.248690, 0.876307, 0.481754, 0.876307, 0.481754, 0.535827, 0.844328, 0.728969, 0.684547, 0.062791, 0.998027, 0.535827, 0.844328, -0.425779, 0.904827]>
memref.global "private" @hannMem : memref<400xf64> = dense<[0.0, 6.168375916970614e-05, 0.0002467198171342, 0.0005550625190150482, 0.0009866357858642205, 0.001541333133436018, 0.002219017698460002, 0.003019522272410202, 0.0039426493427611176, 0.0049881711417212315, 0.00615582970243117, 0.007445336922613066, 0.00885637463565564, 0.01038859468911707, 0.012041619030626338, 0.013815039801161721, 0.015708419435684517, 0.017721290771101017, 0.019853157161528523, 0.02210349260083494, 0.024471741852423234, 0.02695732058622735, 0.029559615522887273, 0.03227798458506631, 0.035111757055874326, 0.03806023374435674, 0.04112268715800954, 0.044298361682277465, 0.04758647376699032, 0.05098621211969223, 0.054496737905816106, 0.05811718495565327, 0.06184665997806821, 0.06568424278090434, 0.06962898649802812, 0.07367991782295402, 0.07783603724899257, 0.08209631931586497, 0.08645971286271914, 0.09092514128748835, 0.09549150281252633, 0.10015767075645471, 0.1049224938121548, 0.10978479633083521, 0.11474337861210543, 0.11979701719998453, 0.1249444651847702, 0.1301844525106951, 0.13551568628929433, 0.14093685111840565, 0.14644660940672627, 0.15204360170384285, 0.15772644703565564, 0.1634937432451133, 0.16934406733817414, 0.17527597583490823, 0.18128800512565513, 0.1873786718321474, 0.1935464731735117, 0.19978988733705805, 0.2061073738537635, 0.21249737397836072, 0.21895831107393465, 0.22548859100093405, 0.23208660251050156, 0.2387507176420256, 0.24547929212481434, 0.2522706657837962, 0.2591231629491423, 0.2660350928697134, 0.2730047501302266, 0.2800304150720424, 0.28711035421746367, 0.2942428206974456, 0.30142605468260963, 0.30865828381745525, 0.31593772365766115, 0.3232625781103715, 0.3306310398773543, 0.3380412909009253, 0.34549150281252644, 0.3529798373838481, 0.3605044469803854, 0.36806347501731357, 0.3756550564175726, 0.38327731807204724, 0.39092837930172886, 0.3986063523217438, 0.4063093427071377, 0.41403544986029517, 0.4217827674798846, 0.4295493840312088, 0.4373333832178479, 0.44513284445447737, 0.45294584334074284, 0.4607704521360776, 0.4686047402353433, 0.4764467746451787, 0.48429462046093585, 0.49214634134408974, 0.5, 0.5078536586559104, 0.5157053795390641, 0.5235532253548213, 0.5313952597646567, 0.5392295478639225, 0.5470541566592572, 0.5548671555455227, 0.5626666167821522, 0.5704506159687914, 0.5782172325201155, 0.5859645501397047, 0.5936906572928624, 0.6013936476782563, 0.6090716206982714, 0.6167226819279528, 0.6243449435824273, 0.6319365249826864, 0.6394955530196147, 0.647020162616152, 0.6545084971874737, 0.6619587090990747, 0.6693689601226458, 0.6767374218896286, 0.6840622763423391, 0.6913417161825449, 0.6985739453173903, 0.7057571793025544, 0.7128896457825363, 0.7199695849279575, 0.7269952498697734, 0.7339649071302867, 0.7408768370508576, 0.7477293342162038, 0.7545207078751857, 0.7612492823579744, 0.7679133974894983, 0.7745114089990659, 0.7810416889260654, 0.7875026260216393, 0.7938926261462367, 0.8002101126629421, 0.8064535268264883, 0.8126213281678527, 0.8187119948743449, 0.8247240241650918, 0.8306559326618259, 0.8365062567548867, 0.8422735529643444, 0.8479563982961571, 0.8535533905932737, 0.8590631488815944, 0.8644843137107058, 0.8698155474893048, 0.8750555348152298, 0.8802029828000155, 0.8852566213878946, 0.8902152036691648, 0.8950775061878451, 0.8998423292435453, 0.9045084971874737, 0.9090748587125117, 0.9135402871372809, 0.9179036806841352, 0.9221639627510075, 0.9263200821770461, 0.9303710135019718, 0.9343157572190957, 0.9381533400219317, 0.9418828150443468, 0.9455032620941839, 0.9490137878803078, 0.9524135262330098, 0.9557016383177226, 0.9588773128419905, 0.9619397662556434, 0.9648882429441257, 0.9677220154149337, 0.9704403844771128, 0.9730426794137726, 0.9755282581475768, 0.977896507399165, 0.9801468428384715, 0.982278709228899, 0.9842915805643155, 0.9861849601988383, 0.9879583809693737, 0.9896114053108829, 0.9911436253643444, 0.9925546630773869, 0.9938441702975689, 0.9950118288582788, 0.996057350657239, 0.9969804777275899, 0.99778098230154, 0.998458666866564, 0.9990133642141358, 0.9994449374809851, 0.9997532801828658, 0.9999383162408303, 1.0, 0.9999383162408303, 0.9997532801828658, 0.9994449374809851, 0.9990133642141358, 0.998458666866564, 0.99778098230154, 0.9969804777275899, 0.996057350657239, 0.9950118288582788, 0.9938441702975689, 0.9925546630773869, 0.9911436253643444, 0.9896114053108829, 0.9879583809693737, 0.9861849601988383, 0.9842915805643155, 0.982278709228899, 0.9801468428384715, 0.977896507399165, 0.9755282581475768, 0.9730426794137726, 0.9704403844771128, 0.9677220154149337, 0.9648882429441257, 0.9619397662556434, 0.9588773128419905, 0.9557016383177226, 0.9524135262330098, 0.9490137878803078, 0.9455032620941839, 0.9418828150443468, 0.9381533400219317, 0.9343157572190957, 0.9303710135019718, 0.9263200821770461, 0.9221639627510075, 0.9179036806841352, 0.9135402871372809, 0.9090748587125117, 0.9045084971874737, 0.8998423292435453, 0.8950775061878451, 0.8902152036691648, 0.8852566213878946, 0.8802029828000155, 0.8750555348152298, 0.8698155474893048, 0.8644843137107058, 0.8590631488815944, 0.8535533905932737, 0.8479563982961571, 0.8422735529643444, 0.8365062567548867, 0.8306559326618259, 0.8247240241650918, 0.8187119948743449, 0.8126213281678527, 0.8064535268264883, 0.8002101126629421, 0.7938926261462367, 0.7875026260216393, 0.7810416889260654, 0.7745114089990659, 0.7679133974894983, 0.7612492823579744, 0.7545207078751857, 0.7477293342162038, 0.7408768370508576, 0.7339649071302867, 0.7269952498697734, 0.7199695849279575, 0.7128896457825363, 0.7057571793025544, 0.6985739453173903, 0.6913417161825449, 0.6840622763423391, 0.6767374218896286, 0.6693689601226458, 0.6619587090990747, 0.6545084971874737, 0.647020162616152, 0.6394955530196147, 0.6319365249826864, 0.6243449435824273, 0.6167226819279528, 0.6090716206982714, 0.6013936476782563, 0.5936906572928624, 0.5859645501397047, 0.5782172325201155, 0.5704506159687914, 0.5626666167821522, 0.5548671555455227, 0.5470541566592572, 0.5392295478639225, 0.5313952597646567, 0.5235532253548213, 0.5157053795390641, 0.5078536586559104, 0.5, 0.49214634134408974, 0.48429462046093585, 0.4764467746451787, 0.4686047402353433, 0.4607704521360776, 0.45294584334074284, 0.44513284445447737, 0.4373333832178479, 0.4295493840312088, 0.4217827674798846, 0.41403544986029517, 0.4063093427071377, 0.3986063523217438, 0.39092837930172886, 0.38327731807204724, 0.3756550564175726, 0.36806347501731357, 0.3605044469803854, 0.3529798373838481, 0.34549150281252644, 0.3380412909009253, 0.3306310398773543, 0.3232625781103715, 0.31593772365766115, 0.30865828381745525, 0.30142605468260963, 0.2942428206974456, 0.28711035421746367, 0.2800304150720424, 0.2730047501302266, 0.2660350928697134, 0.2591231629491423, 0.2522706657837962, 0.24547929212481434, 0.2387507176420256, 0.23208660251050156, 0.22548859100093405, 0.21895831107393465, 0.21249737397836072, 0.2061073738537635, 0.19978988733705805, 0.1935464731735117, 0.1873786718321474, 0.18128800512565513, 0.17527597583490823, 0.16934406733817414, 0.1634937432451133, 0.15772644703565564, 0.15204360170384285, 0.14644660940672627, 0.14093685111840565, 0.13551568628929433, 0.1301844525106951, 0.1249444651847702, 0.11979701719998453, 0.11474337861210543, 0.10978479633083521, 0.1049224938121548, 0.10015767075645471, 0.09549150281252633, 0.09092514128748835, 0.08645971286271914, 0.08209631931586497, 0.07783603724899257, 0.07367991782295402, 0.06962898649802812, 0.06568424278090434, 0.06184665997806821, 0.05811718495565327, 0.054496737905816106, 0.05098621211969223, 0.04758647376699032, 0.044298361682277465, 0.04112268715800954, 0.03806023374435674, 0.035111757055874326, 0.03227798458506631, 0.029559615522887273, 0.02695732058622735, 0.024471741852423234, 0.02210349260083494, 0.019853157161528523, 0.017721290771101017, 0.015708419435684517, 0.013815039801161721, 0.012041619030626338, 0.01038859468911707, 0.00885637463565564, 0.007445336922613066, 0.00615582970243117, 0.0049881711417212315, 0.0039426493427611176, 0.003019522272410202, 0.002219017698460002, 0.001541333133436018, 0.0009866357858642205, 0.0005550625190150482, 0.0002467198171342, 6.168375916970614e-05]>
memref.global "private" @testMem : memref<5xf64> = dense<[0.0, 0.0, 0.0, 0.0, 0.0]>

// func.func private @printMemrefF32(memref<*xf32>) -> ()
// func.func private @printMemrefF64(memref<*xf64>) -> ()

#mulf_trait = {
  doc = "tensor trait for arith.mulf operation",
  indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>],
  iterator_types = ["parallel"]
}

#log10_trait = {
  doc = "tensor trait for math.log10 operation",
  indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>],
  iterator_types = ["parallel", "parallel"]
}

#tail_processing_trait = {
  doc = "tensor trait for tail processing",
  indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>],
  iterator_types = ["parallel", "parallel"]
}

func.func @padToMaxLen(%batched_speech : tensor<?xf64>) -> tensor<480000xf64>{
  %maxLength = arith.constant 480000 : i64
  %truncation = arith.constant 1 : index // true
  
  // scf.if %condition {  // if %batched_speech length > %max_length, truncate to max_length
  //   func.call @truncate() : () -> ()
  // }

  %c0 = arith.constant 0.0 : f64
  %i1 = arith.constant 1 : index
  %size = tensor.dim %batched_speech, %i1 : tensor<?xf64>
  %i480000 = arith.constant 480000 : index
  %difference = arith.subi %i480000, %size : index
  %result = tensor.pad %batched_speech low[0] high[%difference] {
  ^bb0(%i : index):
    tensor.yield %c0 : f64
  } : tensor<?xf64> to tensor<480000xf64>

  return %result : tensor<480000xf64>
}

func.func @hanning_window() -> tensor<400xf64>{
  %hanningWindow = memref.get_global @hannMem : memref<400xf64>
  %t_res = bufferization.to_tensor %hanningWindow : memref<400xf64>
  return %t_res : tensor<400xf64>
}

func.func @initMelFilter() -> memref<201x80xf64> {
  %data = memref.get_global @Data : memref<391xf64>
  %d1Index = memref.get_global @D1Index : memref<391xindex>
  %d2Index = memref.get_global @D2Index : memref<391xindex>
  %shape = memref.get_global @Shape : memref<2xi32>
  %f0 = arith.constant 0.0 : f64

  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c16080 = arith.constant 16080 : index

  %initMem = memref.alloc() : memref<16080xf64>
  scf.for %iv = %c0 to %c16080 step %c1 {
    memref.store %f0, %initMem[%iv] : memref<16080xf64>
    scf.yield
  }

  %mem = memref.reshape %initMem(%shape) : (memref<16080xf64>, memref<2xi32>) -> memref<201x80xf64>
  
  %c391 = arith.constant 391 : index
  scf.for %iv = %c0 to %c391 step %c1 {
    %value = memref.load %data[%iv] : memref<391xf64>
    %i1 = memref.load %d1Index[%iv] : memref<391xindex>
    %i2 = memref.load %d2Index[%iv] : memref<391xindex>
    memref.store %value, %mem[%i1, %i2] : memref<201x80xf64>
    scf.yield
  }
  
  func.return %mem : memref<201x80xf64>
}

func.func @padReflect(%array : tensor<?xf64>, %padWidth : tensor<2xindex>) -> tensor<?xf64>{  
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %before = tensor.extract %padWidth[%c0] : tensor<2xindex>
  %after = tensor.extract %padWidth[%c1] : tensor<2xindex>

  %arrayPadLow = tensor.pad %array low[%before] high[0] {
  ^bb0(%i : index):
    %index = arith.subi %before, %i : index
    %elem = tensor.extract %array[%index] : tensor<?xf64>
    tensor.yield %elem : f64
  } : tensor<?xf64> to tensor<?xf64>

  %arrayPadLowSize = tensor.dim %arrayPadLow, %c0 : tensor<?xf64>
  %symIndex = arith.subi %arrayPadLowSize, %c1 : index
  %result = tensor.pad %arrayPadLow low[0] high[%after] {
  ^bb0(%i : index):
    %sub = arith.subi %i, %symIndex : index
    %index = arith.subi %symIndex, %sub : index
    %elem = tensor.extract %arrayPadLow[%index] : tensor<?xf64>

    tensor.yield %elem : f64
  } : tensor<?xf64> to tensor<?xf64>

  return %result : tensor<?xf64>
}

func.func private @WA(%wa : memref<?xf64>, %x : index, %i : index, %ido : index, %i1 : index) -> f64 {
  %idom1 = arith.subi %ido, %i1 : index
  %tmp1 = arith.muli %x, %idom1 : index
  %index = arith.addi %tmp1, %i : index
  %result = memref.load %wa[%index] : memref<?xf64>
  return %result : f64
}

func.func private @CC(%cc : memref<400xf64>, %a : index, %b : index, %c : index, %ido : index, %l1 : index) -> f64 {
  %tmp1 = arith.muli %l1, %c : index
  %tmp2 = arith.addi %tmp1, %b : index
  %tmp3 = arith.muli %tmp2, %ido : index
  %index = arith.addi %tmp3, %a : index
  %result = memref.load %cc[%index] : memref<400xf64>
  return %result : f64
}

func.func private @CH(%ch : memref<400xf64>, %a : index, %b : index, %c : index, %ido : index, %cdim : index, %toWrite : f64) {
  %tmp1 = arith.muli %cdim, %c : index
  %tmp2 = arith.addi %tmp1, %b : index
  %tmp3 = arith.muli %tmp2, %ido : index
  %index = arith.addi %tmp3, %a : index
  memref.store %toWrite, %ch[%index] : memref<400xf64>
  return
}

func.func private @PM(%c : f64, %d : f64) -> (f64, f64) {
  %a = arith.addf %c, %d : f64
  %b = arith.subf %c, %d : f64
  return %a, %b : f64, f64
}

func.func private @MULPM(%c : f64, %d : f64, %e : f64, %f : f64) -> (f64, f64) {
  %tmp1 = arith.mulf %c, %e : f64
  %tmp2 = arith.mulf %d, %f : f64
  %a = arith.addf %tmp1, %tmp2 : f64
  %tmp3 = arith.mulf %c, %f : f64
  %tmp4 = arith.mulf %d, %e : f64
  %b = arith.subf %tmp3, %tmp4 : f64
  return %a, %b : f64, f64
}

func.func @radf4Extend(%cc : memref<400xf64>, %ch : memref<400xf64>, %wa : memref<?xf64>, %ido : index, %l1 : index, %cdim : index) -> () {
  %i0 = arith.constant 0 : index
  %i1 = arith.constant 1 : index
  %i2 = arith.constant 2 : index
  %i3 = arith.constant 3 : index

  scf.for %k = %i0 to %l1 step %i1 {
    scf.for %i = %i2 to %ido step %i2 {
      %ic = arith.subi %ido, %i : index
      %icm1 = arith.subi %ic, %i1 : index
      %im1 = arith.subi %i, %i1 : index
      %im2 = arith.subi %i, %i2 : index

      %wa0im2 = func.call @WA(%wa, %i0, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa0im1 = func.call @WA(%wa, %i0, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k1 = func.call @CC(%cc, %im1, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik1 = func.call @CC(%cc, %i, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %cr2_ci2:2 = func.call @MULPM(%wa0im2, %wa0im1, %ccim1k1, %ccik1) : (f64, f64, f64, f64) -> (f64, f64)

      %wa1im2 = func.call @WA(%wa, %i1, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa1im1 = func.call @WA(%wa, %i1, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k2 = func.call @CC(%cc, %im1, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik2 = func.call @CC(%cc, %i, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %cr3_ci3:2 = func.call @MULPM(%wa1im2, %wa1im1, %ccim1k2, %ccik2) : (f64, f64, f64, f64) -> (f64, f64)

      %wa2im2 = func.call @WA(%wa, %i2, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa2im1 = func.call @WA(%wa, %i2, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k3 = func.call @CC(%cc, %im1, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik3 = func.call @CC(%cc, %i, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %cr4_ci4:2 = func.call @MULPM(%wa2im2, %wa2im1, %ccim1k3, %ccik3) : (f64, f64, f64, f64) -> (f64, f64)

      %tr1_tr4:2 = func.call @PM(%cr4_ci4#0, %cr2_ci2#0) : (f64, f64) -> (f64, f64)
      %ti1_ti4:2 = func.call @PM(%cr2_ci2#1, %cr4_ci4#1) : (f64, f64) -> (f64, f64)
      %ccim1k0 = func.call @CC(%cc, %im1, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tr2_tr3:2 = func.call @PM(%ccim1k0, %cr3_ci3#0) : (f64, f64) -> (f64, f64)
      %ccik0 = func.call @CC(%cc, %i, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)      
      %ti2_ti3:2 = func.call @PM(%ccik0, %cr3_ci3#1) : (f64, f64) -> (f64, f64)

      %chtmp1:2 = func.call @PM(%tr2_tr3#0, %tr1_tr4#0) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %im1, %i0, %k, %ido, %cdim, %chtmp1#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %icm1, %i3, %k, %ido, %cdim, %chtmp1#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp2:2 = func.call @PM(%ti1_ti4#0, %ti2_ti3#0) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %i, %i0, %k, %ido, %cdim, %chtmp2#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %ic, %i3, %k, %ido, %cdim, %chtmp2#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp3:2 = func.call @PM(%tr2_tr3#1, %ti1_ti4#1) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %im1, %i2, %k, %ido, %cdim, %chtmp3#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %icm1, %i1, %k, %ido, %cdim, %chtmp3#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp4:2 = func.call @PM(%tr1_tr4#1, %ti2_ti3#1) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %i, %i2, %k, %ido, %cdim, %chtmp4#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %ic, %i1, %k, %ido, %cdim, %chtmp4#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      
      scf.yield
    }
    scf.yield
  }
  return
}

func.func @radf4(%cc : memref<400xf64>, %ch : memref<400xf64>, %wa : memref<?xf64>, %ido : index, %l1 : index) {
  %cdim = arith.constant 4 : index
  %hsqt2 = arith.constant 0.70710678118654752440 : f64
  %negHsqt2 = arith.constant -0.70710678118654752440 : f64
  %i0 = arith.constant 0 : index
  %i1 = arith.constant 1 : index
  %i2 = arith.constant 2 : index
  %i3 = arith.constant 3 : index
  %idom1 = arith.subi %ido, %i1 : index

  scf.for %k = %i0 to %l1 step %i1 {
    %cc0k3 = func.call @CC(%cc, %i0, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cc0k1 = func.call @CC(%cc, %i0, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %tr1_tmp0:2 = func.call @PM(%cc0k3, %cc0k1) : (f64, f64) -> (f64, f64)
    func.call @CH(%ch, %i0, %i2, %k, %ido, %cdim, %tr1_tmp0#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
    
    %cc0k0 = func.call @CC(%cc, %i0, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cc0k2 = func.call @CC(%cc, %i0, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %tr2_tmp1:2 = func.call @PM(%cc0k0, %cc0k2) : (f64, f64) -> (f64, f64)
    func.call @CH(%ch, %idom1, %i1, %k, %ido, %cdim, %tr2_tmp1#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
    
    %tmp2_tmp3:2 = func.call @PM(%tr2_tmp1#0, %tr1_tmp0#0) : (f64, f64) -> (f64, f64)
    func.call @CH(%ch, %i0, %i0, %k, %ido, %cdim, %tmp2_tmp3#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
    func.call @CH(%ch, %idom1, %i3, %k, %ido, %cdim, %tmp2_tmp3#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

    scf.yield
  }

  // if(ido & 1 == 0)
  %reminder = arith.remsi %ido, %i2 : index
  %cond0 = arith.cmpi eq, %reminder, %i0 : index
  scf.if %cond0 {
    scf.for %k = %i0 to %l1 step %i1 {
      %ccidom1k1 = func.call @CC(%cc, %idom1, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccidom1k3 = func.call @CC(%cc, %idom1, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tmp0 = arith.addf %ccidom1k1, %ccidom1k3 : f64
      %ti1 = arith.mulf %negHsqt2, %tmp0 : f64

      %tmp1 = arith.subf %ccidom1k1, %ccidom1k3 : f64
      %tr1 = arith.mulf %hsqt2, %tmp1 : f64

      %ccidom1k0 = func.call @CC(%cc, %idom1, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tmp2_tmp3:2 = func.call @PM(%ccidom1k0, %tr1) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %idom1, %i0, %k, %ido, %cdim, %tmp2_tmp3#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %idom1, %i2, %k, %ido, %cdim, %tmp2_tmp3#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %ccidom1k2 = func.call @CC(%cc, %idom1, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tmp4_tmp5:2 = func.call @PM(%ti1, %ccidom1k2) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %i0, %i3, %k, %ido, %cdim, %tmp4_tmp5#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %i0, %i1, %k, %ido, %cdim, %tmp4_tmp5#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      scf.yield
    }
    scf.yield
  }

  // if(ido > 2)
  %cond1 = arith.cmpi sgt, %ido, %i2 : index
  scf.if %cond1 {
    func.call @radf4Extend(%cc, %ch, %wa, %ido, %l1, %cdim) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index, index) -> ()
    
    scf.yield
  }
  
  return 
}

func.func @radf5Extend(%cc : memref<400xf64>, %ch : memref<400xf64>, %wa : memref<?xf64>, %ido : index, %l1 : index, %cdim : index) -> () {
  %tr11 = arith.constant 0.3090169943749474241 : f64
  %tr12 = arith.constant -0.8090169943749474241 : f64
  %ti11 = arith.constant 0.95105651629515357212 : f64
  %ti12 = arith.constant 0.58778525229247312917 : f64
  %i0 = arith.constant 0 : index
  %i1 = arith.constant 1 : index
  %i2 = arith.constant 2 : index
  %i3 = arith.constant 3 : index
  %i4 = arith.constant 4 : index

  scf.for %k = %i0 to %l1 step %i1 {
    scf.for %i = %i2 to %ido step %i2 {
      %ic = arith.subi %ido, %i : index
      %icm1 = arith.subi %ic, %i1 : index
      %im1 = arith.subi %i, %i1 : index
      %im2 = arith.subi %i, %i2 : index

      %wa0im2 = func.call @WA(%wa, %i0, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa0im1 = func.call @WA(%wa, %i0, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k1 = func.call @CC(%cc, %im1, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik1 = func.call @CC(%cc, %i, %k, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %dr2_di2:2 = func.call @MULPM(%wa0im2, %wa0im1, %ccim1k1, %ccik1) : (f64, f64, f64, f64) -> (f64, f64)

      %wa1im2 = func.call @WA(%wa, %i1, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa1im1 = func.call @WA(%wa, %i1, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k2 = func.call @CC(%cc, %im1, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik2 = func.call @CC(%cc, %i, %k, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %dr3_di3:2 = func.call @MULPM(%wa1im2, %wa1im1, %ccim1k2, %ccik2) : (f64, f64, f64, f64) -> (f64, f64)

      %wa2im2 = func.call @WA(%wa, %i2, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa2im1 = func.call @WA(%wa, %i2, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k3 = func.call @CC(%cc, %im1, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik3 = func.call @CC(%cc, %i, %k, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %dr4_di4:2 = func.call @MULPM(%wa2im2, %wa2im1, %ccim1k3, %ccik3) : (f64, f64, f64, f64) -> (f64, f64)

      %wa3im2 = func.call @WA(%wa, %i3, %im2, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %wa3im1 = func.call @WA(%wa, %i3, %im1, %ido, %i1) : (memref<?xf64>, index, index, index, index) -> (f64)
      %ccim1k4 = func.call @CC(%cc, %im1, %k, %i4, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %ccik4 = func.call @CC(%cc, %i, %k, %i4, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %dr5_di5:2 = func.call @MULPM(%wa3im2, %wa3im1, %ccim1k4, %ccik4) : (f64, f64, f64, f64) -> (f64, f64)

      %cr2_ci5:2 = func.call @PM(%dr5_di5#0, %dr2_di2#0) : (f64, f64) -> (f64, f64)
      %ci2_cr5:2 = func.call @PM(%dr2_di2#1, %dr5_di5#1) : (f64, f64) -> (f64, f64)
      %cr3_ci4:2 = func.call @PM(%dr4_di4#0, %dr3_di3#0) : (f64, f64) -> (f64, f64)
      %ci3_cr4:2 = func.call @PM(%dr3_di3#1, %dr4_di4#1) : (f64, f64) -> (f64, f64)

      %ccim1k0 = func.call @CC(%cc, %im1, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tmpch0 = arith.addf %ccim1k0, %cr2_ci5#0 : f64
      %chim10k = arith.addf %tmpch0, %cr3_ci4#0 : f64
      func.call @CH(%ch, %im1, %i0, %k, %ido, %cdim, %chim10k) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %ccik0 = func.call @CC(%cc, %i, %k, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
      %tmpch1 = arith.addf %ccik0, %ci2_cr5#0 : f64
      %chi0k = arith.addf %tmpch1, %ci3_cr4#0 : f64
      func.call @CH(%ch, %i, %i0, %k, %ido, %cdim, %chi0k) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %tmp2 = arith.mulf %tr11, %cr2_ci5#0 : f64
      %tmp3 = arith.addf %ccim1k0, %tmp2 : f64
      %tmp4 = arith.mulf %tr12, %cr3_ci4#0 : f64
      %tr2 = arith.addf %tmp3, %tmp4 : f64

      %tmp5 = arith.mulf %tr11, %ci2_cr5#0 : f64
      %tmp6 = arith.addf %ccik0, %tmp5 : f64
      %tmp7 = arith.mulf %tr12, %ci3_cr4#0 : f64
      %ti2 = arith.addf %tmp6, %tmp7 : f64

      %tmp8 = arith.mulf %tr12, %cr2_ci5#0 : f64
      %tmp9 = arith.addf %ccim1k0, %tmp8 : f64
      %tmp10 = arith.mulf %tr11, %cr3_ci4#0 : f64
      %tr3 = arith.addf %tmp9, %tmp10 : f64

      %tmp11 = arith.mulf %tr12, %ci2_cr5#0 : f64
      %tmp12 = arith.addf %ccik0, %tmp11 : f64
      %tmp13 = arith.mulf %tr11, %ci3_cr4#0 : f64
      %ti3 = arith.addf %tmp12, %tmp13 : f64

      %tr5_tr4:2 = func.call @MULPM(%ci2_cr5#1, %ci3_cr4#1, %ti11, %ti12) : (f64, f64, f64, f64) -> (f64, f64)
      %ti5_ti4:2 = func.call @MULPM(%cr2_ci5#1, %cr3_ci4#1, %ti11, %ti12) : (f64, f64, f64, f64) -> (f64, f64)

      %chtmp1:2 = func.call @PM(%tr2, %tr5_tr4#0) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %im1, %i2, %k, %ido, %cdim, %chtmp1#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %icm1, %i1, %k, %ido, %cdim, %chtmp1#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp2:2 = func.call @PM(%ti5_ti4#0, %ti2) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %i, %i2, %k, %ido, %cdim, %chtmp2#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %ic, %i1, %k, %ido, %cdim, %chtmp2#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp3:2 = func.call @PM(%tr3, %tr5_tr4#1) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %im1, %i4, %k, %ido, %cdim, %chtmp3#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %icm1, %i3, %k, %ido, %cdim, %chtmp3#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

      %chtmp4:2 = func.call @PM(%ti5_ti4#1, %ti3) : (f64, f64) -> (f64, f64)
      func.call @CH(%ch, %i, %i4, %k, %ido, %cdim, %chtmp4#0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      func.call @CH(%ch, %ic, %i3, %k, %ido, %cdim, %chtmp4#1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
      
      scf.yield
    }
    scf.yield
  }
  return
}

func.func @radf5(%cc : memref<400xf64>, %ch : memref<400xf64>, %wa : memref<?xf64>, %ido : index, %l1 : index) {
  %cdim = arith.constant 5 : index
  %tr11 = arith.constant 0.3090169943749474241 : f64
  %tr12 = arith.constant -0.8090169943749474241 : f64
  %ti11 = arith.constant 0.95105651629515357212 : f64
  %ti12 = arith.constant 0.58778525229247312917 : f64
  %i0 = arith.constant 0 : index
  %i1 = arith.constant 1 : index
  %i2 = arith.constant 2 : index
  %i3 = arith.constant 3 : index
  %i4 = arith.constant 4 : index
  %idom1 = arith.subi %ido, %i1 : index

  scf.for %iv = %i0 to %l1 step %i1 {
    %cc0k4 = func.call @CC(%cc, %i0, %iv, %i4, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cc0k1 = func.call @CC(%cc, %i0, %iv, %i1, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cr2_ci5:2 = func.call @PM(%cc0k4, %cc0k1) : (f64, f64) -> (f64, f64)
    
    %cc0k3 = func.call @CC(%cc, %i0, %iv, %i3, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cc0k2 = func.call @CC(%cc, %i0, %iv, %i2, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %cr3_ci4:2 = func.call @PM(%cc0k3, %cc0k2) : (f64, f64) -> (f64, f64)
    
    %cc0k0 = func.call @CC(%cc, %i0, %iv, %i0, %ido, %l1) : (memref<400xf64>, index, index, index, index, index) -> (f64)
    %tmpch0 = arith.addf %cc0k0, %cr2_ci5#0 : f64
    %ch0 = arith.addf %tmpch0, %cr3_ci4#0 : f64
    func.call @CH(%ch, %i0, %i0, %iv, %ido, %cdim, %ch0) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

    %tmpch1 = arith.mulf %tr11, %cr2_ci5#0 : f64
    %tmpch2 = arith.mulf %tr12, %cr3_ci4#0 : f64
    %tmpch3 = arith.addf %cc0k0, %tmpch1 : f64
    %ch1 = arith.addf %tmpch2, %tmpch3 : f64
    func.call @CH(%ch, %idom1, %i1, %iv, %ido, %cdim, %ch1) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

    %tmpch4 = arith.mulf %ti11, %cr2_ci5#1 : f64
    %tmpch5 = arith.mulf %ti12, %cr3_ci4#1 : f64
    %ch2 = arith.addf %tmpch4, %tmpch5 : f64
    func.call @CH(%ch, %i0, %i2, %iv, %ido, %cdim, %ch2) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

    %tmpch6 = arith.mulf %tr12, %cr2_ci5#0 : f64
    %tmpch7 = arith.mulf %tr11, %cr3_ci4#0 : f64
    %tmpch8 = arith.addf %tmpch6, %tmpch7 : f64
    %ch3 = arith.addf %cc0k0, %tmpch8 : f64
    func.call @CH(%ch, %idom1, %i3, %iv, %ido, %cdim, %ch3) : (memref<400xf64>, index, index, index, index, index, f64) -> ()

    %tmpch9 = arith.mulf %ti12, %cr2_ci5#1 : f64
    %tmpch10 = arith.mulf %ti11, %cr3_ci4#1 : f64
    %ch4 = arith.subf %tmpch9, %tmpch10 : f64
    func.call @CH(%ch, %i0, %i4, %iv, %ido, %cdim, %ch4) : (memref<400xf64>, index, index, index, index, index, f64) -> ()
    
    scf.yield
  }

  %condition = arith.cmpi ne, %ido, %i1 : index
  scf.if %condition {
    func.call @radf5Extend(%cc, %ch, %wa, %ido, %l1, %cdim) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index, index) -> ()

    scf.yield
  }
  
  return 
}

func.func @rfft400(%cc : memref<400xf64>) -> () {
  %ch = memref.get_global @chMem : memref<400xf64>
  %wa0 = memref.get_global @tw0Mem : memref<297xf64>
  %wa0Dynamic = memref.cast %wa0 : memref<297xf64> to memref<?xf64>

  %wa1 = memref.get_global @tw1Mem : memref<72xf64>
  %wa1Dynamic = memref.cast %wa1 : memref<72xf64> to memref<?xf64>

  %wa2 = memref.get_global @tw2Mem : memref<16xf64>
  %wa2Dynamic = memref.cast %wa2 : memref<16xf64> to memref<?xf64>

  %i1 = arith.constant 1 : index
  %i4 = arith.constant 4 : index
  %i5 = arith.constant 5 : index
  %i16 = arith.constant 16 : index
  %i25 = arith.constant 25 : index
  %i80 = arith.constant 80 : index
  %i100 = arith.constant 100 : index

  func.call @radf5(%cc, %ch, %wa2Dynamic, %i1, %i80) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index) -> ()
  func.call @radf5(%ch, %cc, %wa2Dynamic, %i5, %i16) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index) -> ()
  func.call @radf4(%cc, %ch, %wa1Dynamic, %i25, %i4) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index) -> ()
  func.call @radf4(%ch, %cc, %wa0Dynamic, %i100, %i1) : (memref<400xf64>, memref<400xf64>, memref<?xf64>, index, index) -> ()

  return
}

// please use memref.alloc() and memref.dealloc for %tmpMem
func.func @absPower(%rfftComplex : memref<400xf64>, %tmpMem : memref<3001x201xf64>, %lineIndex : index) -> () {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c200 = arith.constant 200 : index
  %c398 = arith.constant 398 : index
  %c399 = arith.constant 399 : index
  %power = arith.constant 2 : i32

  %firstNum = memref.load %rfftComplex[%c0] : memref<400xf64>
  %firstPow = math.fpowi %firstNum, %power : f64, i32
  memref.store %firstPow, %tmpMem[%lineIndex, %c0] : memref<3001x201xf64>

  %lastNum = memref.load %rfftComplex[%c399] : memref<400xf64>
  %lastPow = math.fpowi %lastNum, %power : f64, i32
  memref.store %lastPow, %tmpMem[%lineIndex, %c200] : memref<3001x201xf64>

  scf.for %i = %c1 to %c398 step %c2 iter_args(%index = %c1) -> (index) {
    %j = arith.addi %i, %c1 : index
    %num1 = memref.load %rfftComplex[%i] : memref<400xf64>
    %num2 = memref.load %rfftComplex[%j] : memref<400xf64>
    %pow1 = math.fpowi %num1, %power : f64, i32
    %pow2 = math.fpowi %num2, %power : f64, i32
    %add = arith.addf %pow1, %pow2 : f64
    memref.store %add, %tmpMem[%lineIndex, %index] : memref<3001x201xf64>

    %indexNext = arith.addi %index, %c1 : index
    scf.yield %indexNext : index
  }
 
  return
}

func.func @spectrogram(%waveformRanked : tensor<480400xf64>, %window : tensor<400xf64>, %melFilters : tensor<201x80xf64>) -> (tensor<80x3001xf64>) {
  %num_frames = arith.constant 3001 : index
  %num_frequency_bins = arith.constant 201 : index
  %spectrogram =  memref.alloc() : memref<3001x201xf64>

  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %hopLength=  arith.constant 160 : index
  %c400 = arith.constant 400 : index

  scf.for %iv = %c0 to %num_frames step %c1 iter_args(%timestep = %c0) -> (index) {
    %buffer = tensor.extract_slice %waveformRanked[%timestep][%c400][1] : tensor<480400xf64> to tensor<?xf64>
    %buffer400 = tensor.cast %buffer : tensor<?xf64> to tensor<400xf64>
    
    %multiplied = linalg.generic #mulf_trait 
      ins(%buffer400, %window : tensor<400xf64>, tensor<400xf64>)
      outs(%buffer400 : tensor<400xf64>) {
      ^bb0(%a : f64, %b : f64, %c : f64):
        %elem = arith.mulf %a, %b : f64
        linalg.yield %elem : f64
    } -> tensor<400xf64>

    %bufferMem = bufferization.to_memref %multiplied : memref<400xf64>
    func.call @rfft400(%bufferMem) : (memref<400xf64>) -> ()

    func.call @absPower(%bufferMem, %spectrogram, %iv) : (memref<400xf64>, memref<3001x201xf64>, index) -> ()

    %timestepNext = arith.addi %timestep, %hopLength : index
    scf.yield %timestepNext : index
  }

  %alloc0 = memref.alloc() : memref<80x201xf64>
  %init0 = bufferization.to_tensor %alloc0 : memref<80x201xf64>

  %mel_filtersT = linalg.transpose
    ins(%melFilters : tensor<201x80xf64>)
    outs(%init0 : tensor<80x201xf64>)
    permutation = [1, 0]

  %gram = bufferization.to_tensor %spectrogram : memref<3001x201xf64>
  %alloc1 = memref.alloc() : memref<201x3001xf64>
  %init1 = bufferization.to_tensor %alloc1 : memref<201x3001xf64>

  %spectrogramT = linalg.transpose
    ins(%gram : tensor<3001x201xf64>)
    outs(%init1 : tensor<201x3001xf64>)
    permutation = [1, 0]
  
  memref.dealloc %spectrogram : memref<3001x201xf64>

  %alloc2 = memref.alloc() : memref<80x3001xf64>
  %init2 = bufferization.to_tensor %alloc2 : memref<80x3001xf64>

  %matMul = linalg.matmul 
    ins(%mel_filtersT, %spectrogramT : tensor<80x201xf64>, tensor<201x3001xf64>)
    outs(%init2 : tensor<80x3001xf64>)
  -> tensor<80x3001xf64>

  memref.dealloc %alloc0 : memref<80x201xf64>
  memref.dealloc %alloc1 : memref<201x3001xf64>

  %c80 = arith.constant 80 : index
  // %tmpNum were used to generate %mel_floor = 1e-10
  %tmpNum = arith.constant 0.00001 : f64
  %mel_floor = arith.mulf %tmpNum, %tmpNum : f64
  %melFloor = tensor.splat %mel_floor : tensor<80x3001xf64>

  %spectrogramMax = linalg.max
    ins(%melFloor, %matMul : tensor<80x3001xf64>, tensor<80x3001xf64>)
    outs(%melFloor : tensor<80x3001xf64>)
  -> tensor<80x3001xf64>

  memref.dealloc %alloc2 : memref<80x3001xf64>

  %spectrogramLog10 = linalg.generic #log10_trait
    ins(%spectrogramMax : tensor<80x3001xf64>)
    outs(%spectrogramMax : tensor<80x3001xf64>) {
      ^bb0(%a : f64, %b : f64):
        %elem = math.log10 %a : f64
        linalg.yield %elem : f64
    } -> tensor<80x3001xf64>
  
  return %spectrogramLog10 : tensor<80x3001xf64>
}

func.func @whisper_preprocessor(%raw_speech : memref<?xf64>) -> (memref<1x80x3000xf32>) {
  // This part initialize the input data, %input_features
  // %raw_speech = memref.get_global @rawSpeechMem : memref<93680xf64>
  // %batched_speech = bufferization.to_tensor  %raw_speech : memref<93680xf64>
  // %input_features = tensor.cast %batched_speech : tensor<93680xf64> to tensor<?xf64>
  %input_features = bufferization.to_tensor  %raw_speech : memref<?xf64>

  // Pad input data with maxLength 480000, generate %paddedInput
  %paddedInput = func.call @padToMaxLen(%input_features) : (tensor<?xf64>) -> (tensor<480000xf64>)

  // Generate mel_filters
  %mel_filters = func.call @initMelFilter() : () -> memref<201x80xf64>
  %melFilters = bufferization.to_tensor %mel_filters : memref<201x80xf64>

  // Pad waveform
  %waveform = tensor.cast %paddedInput : tensor<480000xf64> to tensor<?xf64>
  %padLen = memref.get_global @padLenMem : memref<2xindex>
  %pad = bufferization.to_tensor %padLen : memref<2xindex>
  %waveformPadded = func.call @padReflect(%waveform, %pad) : (tensor<?xf64>, tensor<2xindex>) -> (tensor<?xf64>)
  %waveformRanked = tensor.cast %waveformPadded : tensor<?xf64> to tensor<480400xf64>

  // Gen hanning window
  %window = func.call @hanning_window() : () -> tensor<400xf64>

  // Calculate spectrogram with rfft
  %logSpec = func.call @spectrogram(%waveformRanked, %window, %melFilters) : (tensor<480400xf64>, tensor<400xf64>, tensor<201x80xf64>) -> tensor<80x3001xf64>

  %logSpecCut = tensor.extract_slice %logSpec[0, 0][80, 3000][1, 1] : tensor<80x3001xf64> to tensor<80x3000xf64>

  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c80 = arith.constant 80 : index
  %c3000 = arith.constant 3000 : index
  %maxInit = arith.constant -10.0 : f64
  %maxNum = scf.for %i = %c0 to %c80 step %c1 iter_args(%maxi = %maxInit) -> f64 {
    %maxNext = scf.for %j = %c0 to %c3000 step %c1 iter_args(%maxj = %maxi) -> f64 {
      %elem = tensor.extract %logSpecCut[%i, %j] : tensor<80x3000xf64>
      %larger = arith.maximumf %elem, %maxj : f64
      scf.yield %larger : f64
    }
    scf.yield %maxNext : f64
  }

  %f8 = arith.constant 8.0 : f64
  %maxNumMinus8 = arith.subf %maxNum, %f8 : f64
  %logSpecFloor = tensor.splat %maxNumMinus8 : tensor<80x3000xf64>

  %logSpecMax = linalg.max
    ins(%logSpecCut, %logSpecFloor : tensor<80x3000xf64>, tensor<80x3000xf64>)
    outs(%logSpecFloor : tensor<80x3000xf64>)
  -> tensor<80x3000xf64>

  %f0 = arith.constant 0.0 : f32
  %f4 = arith.constant 4.0 : f64
  %InputFeaturesF32 = tensor.splat %f0 : tensor<80x3000xf32>

  %result = linalg.generic #tail_processing_trait
    ins(%logSpecMax : tensor<80x3000xf64>)
    outs(%InputFeaturesF32 : tensor<80x3000xf32>) {
    ^bb0(%a : f64, %b : f32):
      %add4 = arith.addf %a, %f4 : f64
      %div4 = arith.divf %add4, %f4 : f64
      %elem = arith.truncf %div4 : f64 to f32
      linalg.yield %elem : f32
    } -> tensor<80x3000xf32>

  %resultExpand = tensor.expand_shape %result [[0, 1], [2]]: tensor<80x3000xf32> into tensor<1x80x3000xf32>

  %resultMem = bufferization.to_memref %resultExpand : memref<1x80x3000xf32>
  
  return %resultMem : memref<1x80x3000xf32>
}
